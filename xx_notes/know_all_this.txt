What should we consider fundamental?
A fair question, and a full answer would be too long for a comment
(though it would fit in a blog post, which I'll go ahead and write now since
this seems to be an issue). But I'll take a whack at the TL;DR version here.

AI, ML, and NLP and web design are application areas, not fundamentals. (You
didn't list computer graphics, computer vision, robotics, embedded systems --
all applications, not fundamentals.) You can cover all the set theory and graph
theory you need in a day. Most people get this in high school. The stuff you
need is just not that complicated. You can safely skip category theory. What
you do need is some amount of time spent on the idea that computer programs
are mathematical objects which can be reasoned about mathematically. This is the
part that the vast majority of people are missing nowadays, and it can be a
little tricky to wrap your brain around at first. You need to understand what a
fixed point is and why it matters. You need automata theory, but again, the
basics are really not that complicated. You need to know about
Turing-completeness, and that in addition to Turing machines there are PDAs and
FSAs. You need to know that TMs can do things that PDAs can't (like parse
context-sensitive grammars), and that PDAs can to things that FSAs can't
(like parse context-free grammars) and that FSAs can parse regular expressions,
and that's all they can do.

You need some programming language theory. You need to know what a binding is,
and that there are two types of bindings that matter: lexical and dynamic. You
need to know what an environment is (a mapping between names and bindings) and
how environments are chained. You need to know how evaluation and compilation
are related, and the role that environments play in both processes. You need to
know the difference between static and dynamic typing. You need to know how to
compile a high-level language down to an RTL. For operating systems, you need to
know what a process is, what a thread is, some of the ways in which parallel
processes lead to problems, and some of the mechanisms for dealing with those
problems, including the fact that some of those mechanisms require hardware
support (e.g. atomic test-and-set instructions). You need a few basic data
structures. Mainly what you need is to understand that what data structures are
really all about is making associative maps that are more efficient for certain
operations under certain circumstances.

You need a little bit of database knowledge. Again, what you really need to know
is that what databases are really all about is dealing with the architectural
differences between RAM and non-volatile storage, and that a lot of these are
going away now that these architectural differences are starting to disappear.
That's really about it.
